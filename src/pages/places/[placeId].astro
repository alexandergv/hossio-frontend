---
import Carrousel from "../../components/Carrousel/Carrousel";
import Map from '../../components/Map/Map'; 
import Layout from '../../layouts/Layout.astro';
import PlaceDetails from "components/PlaceDetails/PlaceDetails";
import axiosInstance from 'services/axiosConfig'
import { getSession } from '../../CustomMiddleware/session';
import ReviewContainer from "components/ReviewContainer/ReviewContainer";
import "./_placeStyles.css";

export interface Review {
    text: string;
    author: string;
}

export interface PlaceDetails {
    schedule: object;
    type: string[];
    characteristics: string[]
}
  

interface Place {
    id: string;
    name: string;
    placeDetails: PlaceDetails;
    description: string;
    rating: number;
    images: string[];
    reviews: Review[];
    location: { 
      type: string;
      coordinates: number[];
    }
}

const session = getSession(Astro.cookies.get('auth_token')?.value);
const isAuthenticated = session.authenticated;
const user = session.user;

if(isAuthenticated && user.role =='owner') {
  return Astro.redirect('/owners');
}

const { placeId } = Astro.params;
const placesData = async () : Promise<Place> => {

  try {
    let response = await axiosInstance.get(`/places/getById/${placeId}`);
    const place: Place = response.data;
    return place;
  } catch (error) {
    Astro.response.status = 404;
    Astro.response.statusText = 'Not found';
    throw Error("no page with this id was found")
  }
}

const placeInfo: Place =  await placesData();

const averageRating = async () : Promise<number> => {
  let response = await axiosInstance.get(`/reviews/averageRating/${placeId}`);
  const averageRating: number = response.data.averageRating;
  return averageRating;
}

placeInfo.rating = await averageRating();

if (!placeInfo) {
  Astro.response.status = 404;
  Astro.response.statusText = 'Not found';
  throw Error("no page with this id was found")
};

---
<Layout session={session} title=`${placeInfo.name} - Hossio``>
    <main class="place-details">
      <h1>{placeInfo.name}</h1>
      <div class="place-content">
        <div class="place-images">
          <Carrousel client:load images={placeInfo.images.reverse()} />
        </div>
        <div class="place-map">
          <Map client:only="react" className="place-details-map" latitude={placeInfo.location.coordinates[0]} longitude={placeInfo.location.coordinates[1]} name={placeInfo.name} />
        </div>
      </div>
      <PlaceDetails placeInfo={placeInfo}/>
      <ReviewContainer client:load userId={session.user?.sub} 
      placeId={placeId} isAuthenticated={isAuthenticated}/>
    </main>
  </Layout>
